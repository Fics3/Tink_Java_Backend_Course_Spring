services:

  bot:
    image: sha256:ebbc24a7063a4980a19b6bf8dc4fd30eb758676e86539e79662ba1476fc15870
    depends_on:
      - scrapper
    ports:
      - 8090:8090
      - 8091:8091
    networks:
      - backend
    environment:
      TELEGRAM_API_KEY: 6879045060:AAGzTnaYdJXj3ASQKfPW1KszAOK5DTQCqC0
      SCRAPPER_URL: "http://scrapper:8080"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      SERVER_PORT: 8090
      MANAGEMENT_PORT: 8091

  scrapper:
    image: sha256:c07462360092bdd718e99a47acb2cdc8d8b3e3dee73627219cfade277b71d7be
    depends_on:
      - liquibase-migrations
      - postgresql
      - kafka
      - grafana
    ports:
      - 8080:8080
      - 8081:8081
    networks:
      - backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/scrapper
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      KAFKA_BOOTSTRAP_SERVERS: "kafka:29092"
      BOT_URL: "http://bot:8090"
      SERVER_PORT: 8080
      MANAGEMENT_PORT: 8081


  postgresql:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: scrapper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgresql:/var/lib/postgresql/data
    networks:
      - backend


  liquibase-migrations:
    image: liquibase/liquibase:4.25
    depends_on:
      - postgresql
    command:
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgresql:5432/scrapper
      - --username=postgres
      - --password=postgres
      - update
    volumes:
      - ./migrations:/liquibase/changelog
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
    volumes:
      - ./scrapper/src/main/resources/docker/zookeeper_jaas_config.conf:/etc/zookeeper/config/zookeeper_jaas.conf
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,OUTSIDE://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_LISTENERS_TIMEOUT_MS: "30000"
    volumes:
      - ./scrapper/src/main/resources/docker/kafka_jaas_config.conf:/etc/kafka/kafka_config_jaas.conf
    networks:
      - backend

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:7.4.4
    restart: always
    depends_on:
      - zookeeper
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://:9092'
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
    ports:
      - "28081:8081"
    networks:
      - backend

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus:/prometheus
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

  grafana:
    container_name: grafana
    image: grafana/grafana-oss:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - backend
    extra_hosts:
      - "host.docker.internal:host-gateway"

volumes:
  postgresql: { }
  grafana: { }
  prometheus: { }

networks:
  backend: { }
