/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.records;

import edu.java.domain.jooq.tables.Repositories;
import java.beans.ConstructorProperties;
import java.util.UUID;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RepositoriesRecord extends UpdatableRecordImpl<RepositoriesRecord>
    implements Record3<Integer, UUID, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached RepositoriesRecord
     */
    public RepositoriesRecord() {
        super(Repositories.REPOSITORIES);
    }

    /**
     * Create a detached, initialised RepositoriesRecord
     */
    @ConstructorProperties({"repositoryId", "linkId", "subscribersCount"})
    public RepositoriesRecord(
        @Nullable Integer repositoryId,
        @Nullable UUID linkId,
        @NotNull Integer subscribersCount
    ) {
        super(Repositories.REPOSITORIES);

        setRepositoryId(repositoryId);
        setLinkId(linkId);
        setSubscribersCount(subscribersCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RepositoriesRecord
     */
    public RepositoriesRecord(edu.java.domain.jooq.tables.pojos.Repositories value) {
        super(Repositories.REPOSITORIES);

        if (value != null) {
            setRepositoryId(value.getRepositoryId());
            setLinkId(value.getLinkId());
            setSubscribersCount(value.getSubscribersCount());
            resetChangedOnNotNull();
        }
    }

    /**
     * Getter for <code>REPOSITORIES.REPOSITORY_ID</code>.
     */
    @Nullable
    public Integer getRepositoryId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>REPOSITORIES.REPOSITORY_ID</code>.
     */
    public void setRepositoryId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>REPOSITORIES.LINK_ID</code>.
     */
    @Nullable
    public UUID getLinkId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>REPOSITORIES.LINK_ID</code>.
     */
    public void setLinkId(@Nullable UUID value) {
        set(1, value);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>REPOSITORIES.SUBSCRIBERS_COUNT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Integer getSubscribersCount() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>REPOSITORIES.SUBSCRIBERS_COUNT</code>.
     */
    public void setSubscribersCount(@NotNull Integer value) {
        set(2, value);
    }

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    @Override
    @NotNull
    public Row3<Integer, UUID, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<Integer, UUID, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return Repositories.REPOSITORIES.REPOSITORY_ID;
    }

    @Override
    @NotNull
    public Field<UUID> field2() {
        return Repositories.REPOSITORIES.LINK_ID;
    }

    @Override
    @NotNull
    public Field<Integer> field3() {
        return Repositories.REPOSITORIES.SUBSCRIBERS_COUNT;
    }

    @Override
    @Nullable
    public Integer component1() {
        return getRepositoryId();
    }

    @Override
    @Nullable
    public UUID component2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Integer component3() {
        return getSubscribersCount();
    }

    @Override
    @Nullable
    public Integer value1() {
        return getRepositoryId();
    }

    @Override
    @Nullable
    public UUID value2() {
        return getLinkId();
    }

    @Override
    @NotNull
    public Integer value3() {
        return getSubscribersCount();
    }

    @Override
    @NotNull
    public RepositoriesRecord value1(@Nullable Integer value) {
        setRepositoryId(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public RepositoriesRecord value2(@Nullable UUID value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public RepositoriesRecord value3(@NotNull Integer value) {
        setSubscribersCount(value);
        return this;
    }

    @Override
    @NotNull
    public RepositoriesRecord values(@Nullable Integer value1, @Nullable UUID value2, @NotNull Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }
}
