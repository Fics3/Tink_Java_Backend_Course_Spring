app:
  scheduler:
    enable: true
    interval: 10s
    force-check-delay: 3600s

  kafka-properties:
    topic:
      name: topic1
      partitions-num: 10
      replicas-num: 1

  database-access-type: jpa
  is-use-queue: "true"


client:
  stackoverflow-properties:
    domain: stackoverflow.com
    api-url: https://api.stackexchange.com
    questions: /questions/%d?site=stackoverflow
    retry-policy:
      attempts: 5
      backoff: 2s
      backoff-strategy: linear
      retry-status-codes:
        - 500
        - 502
        - 503
        - 404
        - 400
  github-properties:
    domain: github.com
    api-url: https://api.github.com
    repos: /repos/%s/%s
    retry-policy:
      attempts: 5
      backoff: 2s
      backoff-strategy: linear
      retry-status-codes:
        - 500
        - 502
        - 503
        - 404
        - 400
  bot-properties:
    url: http://localhost:8090
    retry-policy:
      attempts: 5
      backoff: 2s
      backoff-strategy: linear
      retry-status-codes:
        - 500
        - 502
        - 503
spring:
  application:
    name: scrapper
  liquibase:
    enabled: false
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/scrapper
    username: postgres
    password: postgres
  kafka:
    consumer:
      auto-offset-reset: earliest
    bootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}

  cache:
    jcache:
      provider: com.github.benmanes.caffeine.jcache.spi.CaffeineCachingProvider
    cache-names:
      - buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s

bucket4j:
  enabled: true
  filters:
    - cache-name: buckets
      url: .*
      http-response-body: "{ \"status\": 429, \"error\": \"Too Many Requests\", \"message\": \"You have exhausted your API Request Quota\" }"
      rate-limits:
        - cache-key: "getRemoteAddr()"
          bandwidths:
            - capacity: 100
              time: 100
              unit: seconds
              refill-capacity: 50
              refill-speed: greedy
management:
  server:
    port: 8081
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
      base-path: /
      path-mapping:
        prometheus: /metrics
  metrics:
    tags:
      application: ${spring.application.name}

server:
  port: 8080

logging:
  config: classpath:log4j2-plain.xml

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    path: /swagger-ui
